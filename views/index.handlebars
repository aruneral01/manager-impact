
<style>

body {
  font: 10px sans-serif;
}

.axis path,
.axis line {
  fill: none;
  stroke: #000;
  shape-rendering: crispEdges;
}

.x.axis path {
  stroke: #C8C8D4;
}

.line {
  fill: none;
  stroke: steelblue;
  stroke-width: 1.5px;
}

</style>

<script src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js"></script>
<script>

function annotations(svg){

  var annotations = svg.append("g")
      .attr("clip-path", "url(#clip)");


  annotations.append("circle")
      .attr("cx", 30)
      .attr("cy", 30)
      .attr("class", "annotations")
      .attr("r", 20);


  return annotations;
}


var margin = {top: 20, right: 80, bottom: 30, left: 50},
    width = 960 - margin.left - margin.right,
    height = 500 - margin.top - margin.bottom;

var x = d3.scale.linear()
    .range([0, width]);

var y = d3.scale.linear()
    .range([height, 0]);

var color = d3.scale.category10();

var xAxis = d3.svg.axis()
    .scale(x);

var yAxis = d3.svg.axis()
    .scale(y)
    .orient("left");

var line = d3.svg.line()
    .defined(function(d) { return d.temperature != null; })
    .interpolate("basis")
    .x(function(d) { return x(d.date); })
    .y(function(d) { return y(d.temperature); });


var svg = d3.select("body").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

d3.tsv("/data/ceo.csv", function(error, data) {
  if (error) throw error;

  color.domain(d3.keys(data[0]).filter(function(key) { return key !== "date"; }));

  data.forEach(function(d) {
    d.date = d.date;
  });

  var cities = color.domain().map(function(name) {
    return {
      name: name,
      values: data.map(function(d) {
        return {date: d.date, temperature: d[name] ? +d[name] : null};
      })
    };
  });

  //x.domain(d3.extent(data, function(d) { return d.date; })); //999
  x.domain(["","365"]);

  y.domain(["-30","50"]);

  svg.append("defs").append("clipPath")
    .attr("id", "clip")
  .append("rect")
      .attr("width", width + margin.left)
    .attr("height", height + margin.bottom);

  console.log(height);

  svg.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(0,296)")
      .call(xAxis);

  svg.append("g")
    	.attr("transform", "translate(" + margin.left + "," + margin.top + ")")
    	.attr("clip-path", "url(#clip)");

  svg.append("g")
      .attr("class", "y axis")
      .call(yAxis)
    .append("text")
      .attr("transform", "rotate(-90)")
      .attr("y", 6)
      .attr("dy", ".71em")
      .style("text-anchor", "end")
      .text("Stock Price, NASDAQ Benchmark %");

  var city = svg.selectAll(".city")
      .data(cities)
    .enter().append("g")
      .attr("class", "city");

  var path = city.append("path")
      .attr("class", "line")
      .attr("d", function(d) { return line(d.values); })
      .style("stroke", function(d) { return color(d.name); });

  svg.selectAll(".city").attr("clip-path", "url(#clip)");

  var xscaleFactor = (x.range()[1] - x.range()[0])/(x.domain()[1] - x.domain()[0]);
  var yscaleFactor = (y.range()[1] - y.range()[0])/(y.domain()[1] - y.domain()[0]);

  var anno = annotations(svg);

  var zoom = d3.behavior.zoom()
      .x(x)
      .y(y)
      .on('zoom', function() {
        var t = zoom.translate(),
          tx = t[0],
          ty = t[1];

        tx = Math.min(tx, 0);

        zoom.translate([tx, ty]);

        path.attr("transform", "translate(" + tx + ","+ ty + ") scale(" + d3.event.scale +")");
        svg.selectAll(".annotations").attr("transform", "translate(" + tx + ","+ty+")");

        svg.select('.x.axis').call(xAxis);
        svg.select('.y.axis').call(yAxis);
  });

  d3.select('svg').attr('cursor', 'move')
        .call(zoom)
        .on("mousewheel.zoom", null)
        .on("DOMMouseScroll.zoom", null);

  svg.call(zoom);


  // city.append("text")
  //     .datum(function(d) { return {name: d.name, value: d.values[d.values.length - 1]}; })
  //     .attr("transform", function(d) { return "translate(" + x(d.value.date) + "," + y(d.value.temperature) + ")"; })
  //     .attr("x", 3)
  //     .attr("dy", ".35em")
  //     .text(function(d) { return d.name; });
});



</script>
