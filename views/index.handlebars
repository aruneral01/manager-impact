
<style>

body {
  font: 10px sans-serif;
}

.axis path,
.axis line {
  fill: none;
  stroke: #000;
  shape-rendering: crispEdges;
}

.x.axis path {
  stroke: #C8C8D4;
}

.line {
  fill: none;
  stroke: steelblue;
  stroke-width: 1.5px;
}

</style>

<script src="/scripts/d3.min.js "></script>
<div id="chart" class="chart"></div>
<script>

var margin = {top: 20, right: 80, bottom: 30, left: 50},
    width = 760 - margin.left - margin.right,
    height = 650 - margin.top - margin.bottom;

var zoom = {};
var svg = {};

var labels = {
  marissa_mayer: {
      name: "Marissa Mayer",
      company: "Yahoo",
      years: "2011-",
      startDate: "2012-07-16"
  },
  larry_page: {
      name: "Larry Page",
      company: "Google",
      years: "2011-2015",
      startDate: "2011-04-04"
  },
  john_donahoe: {
      name: "John Donahoe",
      company: "Ebay",
      years: "2008-2015",
      startDate: "2008-03-31"
  },
  meg_whitman: {
      name: "Meg Whitman",
      company: "HP",
      years: "2011-2015",
      startDate: "2011-09-22"
  },
  satya_nadella: {
      name: "Satya Nadella",
      company: "Microsoft",
      years: "2014-",
      startDate: "2014-02-04"
  },
  tim_cook: {
      name: "Tim Cook",
      company: "Apple",
      years: "2011-",
      startDate: "2011-09-22"
  },
  mark_zuckerberg: {
      name: "Mark Zuckerberg",
      company: "Facebook",
      years: "IPO 2012",
      sinceIPO: true,
      startDate: "2012-05-15"
  },
  dick_costolo: {
      name: "Dick Costolo",
      company: "Twitter",
      years: "IPO 2013",
      sinceIPO: true,
      startDate: "2013-11-07"
  }
};

function removeMouseOver(element) {
  element.on("mouseover", function(d) {})
        .on("mouseout", function(d) {});
}

var mainChart = function (data,color) {

  var x = d3.scale.linear()
      .range([0, width]);

  var y = d3.scale.linear()
      .range([height, 0]);

  var xAxis = d3.svg.axis()
      .scale(x);

  var yAxis = d3.svg.axis()
      .scale(y)
      .orient("left");

  addEventLabel = function (d, parent) {

    var person = JSON.parse(d.event).person;
    var labelObjects = [];

    console.log('adding label');

    //event rectangle
    var eventLabels = events.append("rect")
        .attr("class", "event labels " + person + " d" + d.date)
          .attr("x", x(d.date))
          .attr("y", y(d[person]))
          .attr("height", 50)
          .attr("width", 300)
          .attr("rx", 5)
          .attr("ry", 5)
          .style("opacity", 0)
          .style("fill", "white"  )
          .style("stroke", color(person));

    labelObjects.push(eventLabels);

    //event days label
    var dateText = events.append("text")
          .attr("class", "event labels " + person + " d" + d.date)
          .attr("x", x(d.date) + 35)
          .attr("y", y(d[person]) + 15)
          .text(function() {
            var startDate = new Date(Date.parse(labels[person].startDate));
            startDate.setDate(startDate.getDate()+parseInt(d.date));
            if (labels[person].sinceIPO) {
              return d.date + " days from IPO (" + startDate.toDateString() + ")";
            } else {
              return d.date + " days as CEO (" + startDate.toDateString() + ")";
            }
          })
          .attr("font-size", "10px")
          .attr("fill", "#3F4548")
          .style("opacity", 0);

    labelObjects.push(dateText);

    //event description
    var descText = events.append("text")
          .attr("class", "event labels " + person + " d" + d.date)
          .attr("x", x(d.date) + 35)
          .attr("y", y(d[person]) + 32)
          .text(JSON.parse(d.event).desc)
          .attr("font-size", "12px")
          .attr("fill", "#3F4548")
          .style("opacity", 0);

    labelObjects.push(descText);

    //event arrow
    var arrow = events.append("image")
          .attr("class", "event labels " + person + " d" + d.date)
          .attr("x",  x(d.date) + 250)
          .attr("y", y(d[person]) + 5)
          .attr("width", 30)
          .attr("height", 30)
          .style("opacity", 0)
          .attr("xlink:href", function() {
            if (d[person] >= 0){
              return "/images/up.png";
            }else{
              return "/images/down.png";
            }
          });

    labelObjects.push(arrow);

    //event arrow text
    var change = events.append("text")
          .attr("class", "event labels " + person + " d" + d.date)
          .attr("x",  function() {
            var len = (JSON.parse(d.event).change*100 +"%").length;
            return x(d.date) + 255 - len;
          })
          .attr("y", y(d[person]) + 42)
          .text(d[person] +"%")
          .attr("font-size", "10px")
          .style("opacity", 0)
          .attr("fill", function() {
            if (d[person] >= 0){
              return "#4CAF50";
            }else{
              return "#F44336";
            }
          });

      labelObjects.push(change);

      //event avatar bg
      var avatarBg = events.append("circle")
            .attr("class","event labels " + person + " d" + d.date)
            .attr("cx",  x(d.date)+5)
            .attr("cy", y(d[person])+25)
            .attr("r", 26)
            .style("opacity", 0)
            .style("fill", color(person))
            .style("stroke", color(person));

      labelObjects.push(avatarBg);

      //event avatars
      var avatars = events.append("image")
            .attr("class","event labels " + person + " d" + d.date)
            .attr("x",  x(d.date) - 20)
            .attr("y", y(d[person]))
            .attr("width", 50)
            .attr("height", 50)
            .style("opacity", 0)
            .attr("xlink:href", "/images/" + person + ".png")

      labelObjects.push(avatars);

      return labelObjects;
  }

  addMouseOver = function (element, parent) {

    element.on("mouseover", function(d) {

      var person = JSON.parse(d.event).person;

      var labelObjects = addEventLabel(d, parent);

      var labelToggle = d3.selectAll(".event.labels." + JSON.parse(d.event).person + ".d" + d.date);
      labelToggle.transition()
      .style("opacity", 1)
      .duration(500) // this is .5s
      .delay(100)
      .ease();

      //hidden event rect - this deals with the mouseover shiz
      var hiddenArea = parent.append("svg:a")
          .attr("xlink:href", function() { return JSON.parse(d.event).link; } )
          .attr("target", "_blank")
          .attr('cursor', 'pointer')
          .append("rect")
          .attr("class", function(d) { return "event mouseover " + JSON.parse(d.event).person + " d" + d.date; })
          .attr("x", function() { return x(d.date) - 25; } )
          .attr("y", function () {
            return y(d[JSON.parse(d.event).person]) - 10;
          })
          .attr("height", 70)
          .attr("width", 350)
          .attr("rx", 5)
          .attr("ry", 5)
          .style("opacity", 0);

      hiddenArea.on("mouseout", function(d) {

        console.log('removing label');

        labelObjects.forEach(function(l){
          l.remove();
        });

        hiddenArea.remove();

        var dotToggle = d3.selectAll(".event.dot" );

        dotToggle.transition()
        .style("visibility", "visible")
        .duration(500) // this is .5s
        .delay(500)
        .ease();
      });

      var dotToggle = d3.selectAll(".event.dot" );
      dotToggle.transition()
      .style("visibility", "hidden")
      .duration(500) // this is .5s
      .delay(100)
      .ease();

    });
  };
////////////

  var line = d3.svg.line()
      .defined(function(d) { return d.price != null; })
      .interpolate("basis")
      .x(function(d) { return x(d.date); })
      .y(function(d) { return y(d.price); });

  var eline = d3.svg.line()
      .defined(function(d) { return d.event != null; })
      .x(function(d) {  return x(d.date); })
      .y(function(d) {
        var eventOwner = JSON.parse(d.event).person;
        return y(d[eventOwner]);
      });

  svg = d3.select("#chart").classed('chart',true).append("svg")
      .attr("width", width + margin.left + margin.right)
      .attr("height", height + margin.top + margin.bottom)
    .append("g")
      .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

  var ceos = color.domain().map(function(name) {

    var lastNonNull = 0; //fill in the gaps at weekends
    var sequentialNulls = 0;

    return {
      name: name,
      values: data.map(function(d) {
        lastNonNull = d[name] ? d[name] : lastNonNull;
        sequentialNulls = d[name] ? 0 : ++sequentialNulls; //sequence of nulls means we've hit the end

        if(sequentialNulls > 4) lastNonNull = null;
        return {
          date: d.date,
          price: d[name] ? +d[name] : lastNonNull,
        };
      })
    };
  });

  x.domain(["","365"]);

  y.domain(["-30","50"]);

  svg.append("defs").append("clipPath")
    .attr("id", "clip")
  .append("rect")
      .attr("width", width + margin.left)
    .attr("height", height + margin.bottom);

  svg.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(0,375)")
      .call(xAxis)
      .append("text")
      .attr("x", 630)
        .attr("y", -12)
        .attr("dy", ".71em")
        .style("text-anchor", "end")
        .text("Days as CEO (or since IPO)");

  svg.append("g")
    	.attr("transform", "translate(" + margin.left + "," + margin.top + ")")
    	.attr("clip-path", "url(#clip)");

  svg.append("g")
      .attr("class", "y axis")
      .call(yAxis)
    .append("text")
      .attr("transform", "rotate(-90)")
      .attr("y", 6)
      .attr("dy", ".71em")
      .style("text-anchor", "end")
      .text("Stock Price, NASDAQ Benchmark %");

  var city = svg.selectAll(".city")
      .data(ceos)
    .enter().append("g")
      .attr("class", "city");

  var path = city.append("path")
      .attr("class", function(d) { return "line " + d.name; })
      .attr("d", function(d) { return line(d.values); })
      .style("stroke", function(d) { return color(d.name); });

  var eventDataOnly = data.filter(function(d) { if(d.event) { return d; }});

  var events = svg.selectAll(".events")
      .data(eventDataOnly)
      .enter().append("g")
      .attr("class", "events")
      .attr("clip-path", "url(#clip)");

  var eventDots = events.append("circle")
      .attr("class", function(d) { return "event dot " + JSON.parse(d.event).person + " d" + d.date; })
        .attr("cx", eline.x())
        .attr("cy", eline.y())
        .attr("r", 5)
        .style("fill", function(d) { return color(JSON.parse(d.event).person); })
        .attr('cursor', 'pointer');

  addMouseOver(eventDots, events);

  svg.selectAll(".city").attr("clip-path", "url(#clip)");

  var xscaleFactor = (x.range()[1] - x.range()[0])/(x.domain()[1] - x.domain()[0]);
  var yscaleFactor = (y.range()[1] - y.range()[0])/(y.domain()[1] - y.domain()[0]);

  zoom = d3.behavior.zoom()
      .x(x)
      .y(y)
      .scaleExtent([0.25,2])
      .on('zoom', function() {
        var t = zoom.translate(),
          tx = t[0],
          ty = t[1];

        tx = Math.min(tx, 0);

        zoom.translate([tx, ty]);

        path.attr("transform", "translate(" + tx + ","+ ty + ") scale(" + d3.event.scale +")");
        svg.selectAll(".event.dot").attr("transform", "translate(" + tx + ","+ ty + ") scale(" + d3.event.scale +")");
        svg.selectAll(".event.labels").attr("transform", "translate(" + tx + ","+ ty + ")");
        svg.select('.x.axis').call(xAxis);
        svg.select('.y.axis').call(yAxis);
  });

  d3.select('svg').attr('cursor', 'move')
        .call(zoom)
        .on("mousewheel.zoom", null)
        .on("DOMMouseScroll.zoom", null);

  svg.call(zoom);

}

function toggle(name){
  var lineToToggle = d3.select(".line." + name);

  lineToToggle.transition()
  .style("opacity", lineToToggle.style("opacity") == 0 ? 1 : 0)
  .duration(500) // this is .5s
  .delay(100)
  .ease();

  var avatarToToggle = d3.select(".right_avatar_" + name);

  avatarToToggle.transition()
  .style("opacity", avatarToToggle.style("opacity") == 0.2 ? 1 : 0.2)
  .duration(500) // this is .5s
  .delay(100)
  .ease();

  var eventsToToggle = d3.selectAll(".event.dot." + name);

  if(!eventsToToggle.empty()) {

    if(eventsToToggle.style("opacity") == 0) {
      addMouseOver(eventsToToggle, d3.select("#chart").selectAll(".events"));
    } else {
      removeMouseOver(eventsToToggle);
    }

    eventsToToggle.transition()
    .style("opacity", eventsToToggle.style("opacity") == 0 ? 1 : 0)
    .duration(500) // this is .5s
    .delay(100)
    .ease();
  }

}

function hintRect() {

  pulse = function() {
    rect = d3.select(".hint-rect");

    (function repeat() {
          console.log('repeating');
  				rect = rect.transition()
  					.duration(2000)
  					.attr("opacity", 0.2)
  					.transition()
  					.duration(2000)
  					.attr("opacity", 0)
  					.each("end", repeat);
  			})();
  };

  var hintRect = svg.append("g")
      .append("rect")
      .attr("class", "hint-rect")
      .attr("x", 100)
        .attr("y", 200)
        .attr("rx", 20)
        .attr("ry", 20)
        .attr("height", 250)
        .attr("width", 500)
        .style("fill", "#000")
        .each(pulse);

  var hintText = svg.append("g")
      .append("text")
      .attr("x", 525)
        .attr("y", 300)
        .attr("dy", ".71em")
        .style("text-anchor", "end")
        .style("font-size","50px")
        .text("Click To Interact");

  svg.on("click", function() {
    hintRect.remove();
    hintText.remove();
  });

}

function rightToggles(filedata,color) {

  var toggleWidth = 150,
    toggleHeight = height;

  var toggles = d3.select('#chart').classed('chart', true).append('svg')
    .classed('toggles', true)
    .attr('width', 150)
    .attr('height', toggleHeight + margin.top + margin.bottom)
    .append('g');

  color.domain().forEach(function(name, i){

    var circle = toggles.append("circle")
          .attr("cx", 29)
          .attr("cy", 41+(i*83))
          .attr("r", 28)
          .attr("class", name)
          .style("stroke", color(name))
          .style("fill", color(name))
          .style("opacity", 0.7);

    var nameLabel = toggles.append("text")
          .attr("x", 65)
          .attr("y", 31+(83*i))
          .text(labels[name].name)
          .attr("font-size", "12px")
          .attr("fill", "#3F4548")
          .style("opacity", 0.9);

    var companyLabel = toggles.append("text")
          .attr("x", 65)
          .attr("y", 46+(83*i))
          .text(labels[name].company)
          .attr("font-size", "12px")
          .attr("fill", "#3F4548")
          .style("opacity", 0.7);

    var yearsLabel = toggles.append("text")
          .attr("x", 65)
          .attr("y", 61+(83*i))
          .text("("+ labels[name].years +")")
          .attr("font-size", "10px")
          .attr("fill", "#3F4548")
          .style("opacity", 0.7);

    var avatar = toggles.append("image")
          .attr("x", 4)
          .attr("y", 16+(83*i))
          .attr("class", "right_avatar_" + name)
          .attr('cursor', 'pointer')
          .attr("width", 50)
          .attr("height", 50)
          .attr("xlink:href", "/images/" + name + ".png");

    avatar.on("click", function() {
      toggle(name);
    });

  });



}

d3.tsv("/data/ceo_bench.csv", function(error, filedata) {
  if (error) throw error;

  var color = d3.scale.category10();
  color.domain(d3.keys(filedata[0]).filter(function(key) { return (key !== "date" && key !== "event"); }));

  color.domain().forEach(function(name, i){
    console.log(name);
  });

  mainChart(filedata,color);
  rightToggles(filedata,color);

  if(Math.max(document.documentElement.clientWidth, window.innerWidth || 0) > 999){
    hintRect();
  }

  toggle('john_donahoe');
  toggle('dick_costolo');
  toggle('meg_whitman');


});



</script>
